/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
const delay = require('./functions/delay.js');

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
const throttleMode = {
    evenly: 1,
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Class;       ThrottleModeEvenly
//
// Description: Does the math to calculate how long we have to wait until the next event may take place.
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class ThrottleModeEvenly {
    constructor(throttle) {
        this.throttle = throttle;
    }

    async next() {
        let timeEvent = Date.now();
        let timeStillToPass = 0;

        if (this.throttle.regularEvents.length != 0) {
            let timeShouldHavePassed = this.throttle.regularEvents.length * this.throttle.normalRateInterval;
            let timeHasPassed = timeEvent - this.throttle.regularEvents[0];
            timeStillToPass = timeShouldHavePassed - timeHasPassed;
            timeEvent = timeEvent + timeStillToPass;
        }

        this.throttle.regularEvents.push(timeEvent);

        if (timeStillToPass > 0)
            await delay(timeStillToPass);
        return true;
    }
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Class:       Throttle
//
// Description: Implements the event throttler.
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class Throttle {
    constructor(options) {

        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        // normalRateLimit: The maximum number of events that may occur during the window
        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        this.normalRateLimit = options.normalRateLimit;

        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        // normalRateWindow: The duration of the sliding window during which we measure event rates
        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        this.normalRateWindow = options.normalRateWindow;

        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        // interval: if events are spread out evenly at maximum rate then the interval is the time between those events. Any even that comes in
        // faster is considered bursting.
        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        this.normalRateInterval = Math.floor(this.normalRateWindow / this.normalRateLimit);

        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        // Provide room for different throttling modes in the future 
        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        this.throttleRegular = new ThrottleModeEvenly(this);

        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        // regularEvents: a list of timestamps from the most recent events
        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        this.regularEvents = []
        this.lastEvent = 0;
    }

    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //
    // Function:    cleanup
    //
    // Description: Removes events from the past from the regularEvents array so that they no longer play a part in scheduling.
    //
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    cleanup() {
        let cutoffTime = Date.now() - this.normalRateWindow;
        while ((this.regularEvents.length) && (this.regularEvents[0] < cutoffTime))
            this.regularEvents.shift();
    }

    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //
    // Function:    next
    //
    // Description: Returns a promise that comples when the next event may take place.
    //
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    async next() {
        let timeNow = Date.now();
        this.cleanup();
        await this.throttleRegular.next();
    }
}

module.exports = {
    Throttle: Throttle,
    throttleMode: throttleMode,
}
